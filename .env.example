# Database Configuration
DB_NAME=clink
DB_USER=clink_user
DB_PASSWORD=clink_password
DB_HOST=localhost
DB_PORT=5432

# Django Settings
# SECURITY WARNING: Generate a new SECRET_KEY for production!
# You can generate one with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=django-insecure-f69!lu&dzhxprhlryj%ibg!y7okfzf!$)7jhc9_@t(7#p8#z(6
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1
CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000

# Docker-Specific Settings
# When using Docker Compose, set DB_HOST=postgres to use the database service
# For local development, keep DB_HOST=localhost

# Default Admin User (for Docker deployments)
# The admin user will be created automatically on first container startup if no superuser exists
DJANGO_SUPERUSER_USERNAME=admin
DJANGO_SUPERUSER_EMAIL=admin@example.com
DJANGO_SUPERUSER_PASSWORD=changeme

# Server Configuration (Docker only)
# SERVER_TYPE options: gunicorn (production) or development (Django runserver)
SERVER_TYPE=gunicorn
GUNICORN_WORKERS=4
GUNICORN_TIMEOUT=120
LOG_LEVEL=info

# Port Configuration (Docker only)
WEB_PORT=8000
ADMINER_PORT=8080
REDIS_PORT=6379

# Celery Configuration
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0
CELERY_LOG_LEVEL=info

# Email Configuration
# For development, use console backend to print emails to console
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
# For production, use SMTP backend
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=
DEFAULT_FROM_EMAIL=noreply@clink.com
